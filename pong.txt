# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400
HALF_HEIGHT = HEIGHT/2
HALF_WIDTH = WIDTH/2
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_vel = [0,0]
paddle1_pos1 = float(HALF_HEIGHT-HALF_PAD_HEIGHT)
paddle1_pos2 = float(HALF_HEIGHT+HALF_PAD_HEIGHT)
paddle2_pos1 = float(HALF_HEIGHT-HALF_PAD_HEIGHT)
paddle2_pos2 = float(HALF_HEIGHT+HALF_PAD_HEIGHT)
paddle1_vel = 0
paddle2_vel = 0
score1 = 0
score2 = 0
ball_pos = [WIDTH/2,HEIGHT/2]
direction = True

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2,HEIGHT/2]
    if RIGHT:
        ball_vel = [random.randrange(2, 4),-random.randrange(1, 3)]
    else:
        ball_vel = [-random.randrange(2, 4),-random.randrange(1, 3)]


# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    global paddle1_pos1,paddle1_pos2, paddle2_pos1, paddle2_pos2
    score1 = 0
    score2 = 0
    paddle1_pos1 = float(HALF_HEIGHT-HALF_PAD_HEIGHT)
    paddle1_pos2 = float(HALF_HEIGHT+HALF_PAD_HEIGHT)
    paddle2_pos1 = float(HALF_HEIGHT-HALF_PAD_HEIGHT)
    paddle2_pos2 = float(HALF_HEIGHT+HALF_PAD_HEIGHT)
    spawn_ball(direction)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    global paddle1_pos1, paddle1_pos2, paddle2_pos1, paddle2_pos2,HEIGHT
    global paddle1_vel, paddle2_vel,ball_pos
 
       
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
   
          
    # draw ball
      
    
    canvas.draw_circle(ball_pos,BALL_RADIUS,3,"RED","WHITE")
    
    # update paddle's vertical position, keep paddle on the screen
    
    paddle1_pos1 += paddle1_vel
    paddle1_pos2 += paddle1_vel
    paddle2_pos1 += paddle2_vel
    paddle2_pos2 += paddle2_vel
    if paddle1_pos1 < 0 or paddle1_pos2 > HEIGHT: 
        paddle1_vel = 0
    if paddle2_pos1 < 0 or paddle2_pos2 > HEIGHT:
        paddle2_vel = 0
        
    # draw paddles
    canvas.draw_line([PAD_WIDTH, paddle1_pos1],[PAD_WIDTH, paddle1_pos2], 5, "RED")
    canvas.draw_line([WIDTH - PAD_WIDTH, paddle2_pos1],[WIDTH - PAD_WIDTH, paddle2_pos2], 5, "RED")
    # determine whether paddle and ball collide   
    if ball_pos[0] <= PAD_WIDTH+BALL_RADIUS:
        if paddle1_pos1<ball_pos[1]<paddle1_pos2:
            ball_vel [0]= -1.1 *ball_vel[0]   
        else:
            spawn_ball(True)
            score2 += 1
    if ball_pos[0] >= WIDTH-PAD_WIDTH-BALL_RADIUS:
        if paddle2_pos1<ball_pos[1]<paddle2_pos2:
            ball_vel [0] = -1.1 * ball_vel[0]
        else:
            spawn_ball(False)
            score1 +=1
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    elif ball_pos[1] >= (HEIGHT-BALL_RADIUS):
        ball_vel[1] = -ball_vel[1]
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    
    # draw scores
    canvas.draw_text(str(score1), (WIDTH / 4 - 10, 50), 40, "White")
    canvas.draw_text(str(score2), (WIDTH / 4 * 3 - 10, 50), 40, "White")   
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -5
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 5
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -5
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 5
       
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
def restart_game():
    new_game()
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_canvas_background("GREEN")
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", restart_game, 100)


# start frame
new_game()
frame.start()
